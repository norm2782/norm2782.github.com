<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Norm 2782]]></title>
  <link href="http://norm2782.github.com/atom.xml" rel="self"/>
  <link href="http://norm2782.github.com/"/>
  <updated>2012-01-01T23:32:11+01:00</updated>
  <id>http://norm2782.github.com/</id>
  <author>
    <name><![CDATA[JurriÃ«n Stutterheim]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using digestive-functors with Heist]]></title>
    <link href="http://norm2782.github.com/blog/2012/01/01/using-digestive-functors-with-heist/"/>
    <updated>2012-01-01T21:23:00+01:00</updated>
    <id>http://norm2782.github.com/blog/2012/01/01/using-digestive-functors-with-heist</id>
    <content type="html"><![CDATA[<p>In this post we will make digestive-functors and Heist play together
nicely. We will see how we can create and validate forms using vanilla
digestive-functors and render these, together with potential validation
errors, in a Heist template.</p>

<!-- more -->


<p>Currently this post is secretly just here to allow me to play with
Octopress.</p>

<p>This post assumes you are familiar with the snaplet infrastructure and
that you are more or less comfortable with defining routes and rendering
templates with Heist. If this is not the case, you might want to read
some of the tutorials on the Snap website first. This post also assumes
that you know how to work with the digestive-functors library.</p>

<p>Since I want the bulk of the code to be compilable (for when I figure
out how to make Octopress and Literate Haskell play nicely together),
first some imports:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE OverloadedStrings, TemplateHaskell #-}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">module</span> <span class="nn">Site</span>
</span><span class='line'>  <span class="p">(</span> <span class="nf">app</span>
</span><span class='line'>  <span class="p">)</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Control.Applicative</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Control.Monad.State</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Data.Lens.Template</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Data.Maybe</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Data.Text</span> <span class="p">(</span><span class="kt">Text</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span>  <span class="nn">Data.Text</span> <span class="k">as</span> <span class="n">T</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Snap.Core</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Snap.Snaplet</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Snap.Snaplet.Heist</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Text.Blaze</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span>  <span class="nn">Text.Blaze.Html5</span> <span class="k">as</span> <span class="n">H</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span>  <span class="nn">Text.Blaze.Html5.Attributes</span> <span class="k">as</span> <span class="n">A</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Text.Blaze.Internal</span> <span class="p">(</span><span class="kt">HtmlM</span><span class="p">(</span><span class="o">..</span><span class="p">))</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Text.Blaze.Renderer.XmlHtml</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Text.Digestive</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Text.Digestive.Forms.Snap</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Text.Digestive.Blaze.Html5</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span>  <span class="nn">Text.Email.Validate</span> <span class="k">as</span> <span class="n">E</span>
</span><span class='line'><span class="kr">import</span>            <span class="nn">Text.Templating.Heist</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we are using Snap 0.7 at the moment of writing, we start by defining
out snaplet state type, generating some lenses using Template Haskell and
defining a handy type synonym for our handlers. We also want to use Heist,
so we need to define a HasHeist instance for our App type as well.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">App</span>
</span><span class='line'>  <span class="ow">=</span>  <span class="kt">App</span>
</span><span class='line'>  <span class="p">{</span>  <span class="n">_heist</span> <span class="ow">::</span> <span class="kt">Snaplet</span> <span class="p">(</span><span class="kt">Heist</span> <span class="kt">App</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">makeLens</span> <span class="sc">&#39;&#39;</span><span class="kt">App</span>
</span><span class='line'>
</span><span class='line'><span class="kr">type</span> <span class="kt">AppHandler</span> <span class="ow">=</span> <span class="kt">Handler</span> <span class="kt">App</span> <span class="kt">App</span>
</span><span class='line'>
</span><span class='line'><span class="kr">instance</span> <span class="kt">HasHeist</span> <span class="kt">App</span> <span class="kr">where</span>
</span><span class='line'>  <span class="n">heistLens</span> <span class="ow">=</span> <span class="n">subSnaplet</span> <span class="n">heist</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having written all the boilerplate, we can get started with defining our form.
In this case it&#8217;s a simple login form with a plain textfield, a password field,
a remember me checkbox and a login button.</p>

<p>When the form has been validated, we want to store the form data in a custom
datatype:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">LoginData</span>
</span><span class='line'>  <span class="ow">=</span>  <span class="kt">LoginData</span>
</span><span class='line'>  <span class="p">{</span>  <span class="n">emailAddress</span> <span class="ow">::</span> <span class="kt">Text</span>
</span><span class='line'>  <span class="p">,</span>  <span class="n">password</span> <span class="ow">::</span> <span class="kt">Text</span>
</span><span class='line'>  <span class="p">,</span>  <span class="n">rememberMe</span> <span class="ow">::</span> <span class="kt">Bool</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Defining the form is straight-forward if you are used to working with digestive-functors.
The form is wrapped in divs for better styling options and we attach validators to make
sure that we get a valid email address and a long enough password. The isValid function
comes from the email-validate library.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">loginForm</span> <span class="ow">::</span> <span class="kt">Form</span> <span class="kt">AppHandler</span> <span class="kt">SnapInput</span> <span class="kt">Html</span> <span class="p">(</span><span class="kt">FormHtml</span> <span class="kt">Html</span><span class="p">)</span> <span class="kt">LoginData</span>
</span><span class='line'><span class="nf">loginForm</span> <span class="ow">=</span> <span class="p">(</span><span class="nf">\</span><span class="n">e</span> <span class="n">p</span> <span class="n">r</span> <span class="kr">_</span> <span class="ow">-&gt;</span> <span class="kt">LoginData</span> <span class="n">e</span> <span class="n">p</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;$&gt;</span>  <span class="n">mapViewHtml</span> <span class="kt">H</span><span class="o">.</span><span class="n">div</span> <span class="p">(</span>
</span><span class='line'>       <span class="n">label</span>  <span class="s">&quot;Email address: &quot;</span>
</span><span class='line'>       <span class="o">++&gt;</span>    <span class="n">inputText</span> <span class="kt">Nothing</span> <span class="p">`</span><span class="n">validate</span><span class="p">`</span> <span class="n">isEmail</span>
</span><span class='line'>       <span class="o">&lt;++</span>    <span class="n">errors</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;*&gt;</span>  <span class="n">mapViewHtml</span> <span class="kt">H</span><span class="o">.</span><span class="n">div</span><span class="p">(</span>
</span><span class='line'>       <span class="n">label</span>  <span class="s">&quot;Password: &quot;</span>
</span><span class='line'>       <span class="o">++&gt;</span>    <span class="n">inputPassword</span> <span class="kt">False</span> <span class="p">`</span><span class="n">validate</span><span class="p">`</span> <span class="n">longPwd</span>
</span><span class='line'>       <span class="o">&lt;++</span>    <span class="n">errors</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;*&gt;</span>  <span class="n">mapViewHtml</span> <span class="kt">H</span><span class="o">.</span><span class="n">div</span> <span class="p">(</span>
</span><span class='line'>       <span class="n">label</span>  <span class="s">&quot;Remember me?&quot;</span>
</span><span class='line'>       <span class="o">++&gt;</span>    <span class="n">inputCheckBox</span> <span class="kt">True</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;*&gt;</span>  <span class="n">mapViewHtml</span> <span class="kt">H</span><span class="o">.</span><span class="n">div</span> <span class="p">(</span>
</span><span class='line'>       <span class="n">submit</span> <span class="s">&quot;Login&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">isEmail</span> <span class="ow">::</span> <span class="kt">Validator</span> <span class="kt">AppHandler</span> <span class="kt">Html</span> <span class="kt">Text</span>
</span><span class='line'><span class="nf">isEmail</span> <span class="ow">=</span> <span class="n">check</span> <span class="s">&quot;Invalid email address&quot;</span> <span class="p">(</span><span class="kt">E</span><span class="o">.</span><span class="n">isValid</span> <span class="o">.</span> <span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">longPwd</span> <span class="ow">::</span> <span class="kt">Validator</span> <span class="kt">AppHandler</span> <span class="kt">Html</span> <span class="kt">Text</span>
</span><span class='line'><span class="nf">longPwd</span>  <span class="ow">=</span>  <span class="n">check</span> <span class="s">&quot;Password needs to be at least six characters long&quot;</span>
</span><span class='line'>         <span class="o">$</span>  <span class="nf">\</span><span class="n">xs</span> <span class="ow">-&gt;</span> <span class="kt">T</span><span class="o">.</span><span class="n">length</span> <span class="n">xs</span> <span class="o">&gt;=</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far we have not seen anything new yet.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">showForm</span> <span class="ow">::</span> <span class="kt">AttributeValue</span> <span class="ow">-&gt;</span> <span class="kt">FormHtml</span> <span class="p">(</span><span class="kt">HtmlM</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Html</span>
</span><span class='line'><span class="nf">showForm</span> <span class="n">act</span> <span class="n">frm</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kr">let</span>  <span class="p">(</span><span class="n">formHtml&#39;</span><span class="p">,</span> <span class="n">enctype</span><span class="p">)</span> <span class="ow">=</span> <span class="n">renderFormHtml</span> <span class="n">frm</span>
</span><span class='line'>  <span class="kr">in</span>   <span class="kt">H</span><span class="o">.</span><span class="n">form</span>  <span class="o">!</span> <span class="kt">A</span><span class="o">.</span><span class="n">enctype</span> <span class="p">(</span><span class="kt">H</span><span class="o">.</span><span class="n">toValue</span> <span class="o">$</span> <span class="n">show</span> <span class="n">enctype</span><span class="p">)</span> <span class="o">!</span> <span class="kt">A</span><span class="o">.</span><span class="n">method</span> <span class="s">&quot;post&quot;</span>
</span><span class='line'>               <span class="o">!</span> <span class="kt">A</span><span class="o">.</span><span class="n">action</span> <span class="n">act</span> <span class="o">$</span> <span class="n">formHtml&#39;</span> <span class="o">&gt;&gt;</span> <span class="n">return</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">formHandler</span> <span class="ow">::</span> <span class="kt">AppHandler</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">formHandler</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">res</span> <span class="ow">&lt;-</span> <span class="n">eitherSnapForm</span> <span class="n">loginForm</span> <span class="s">&quot;login-form&quot;</span>
</span><span class='line'>  <span class="kr">case</span> <span class="n">res</span> <span class="kr">of</span>
</span><span class='line'>    <span class="kt">Left</span> <span class="n">form</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>      <span class="kr">let</span> <span class="n">nodes</span> <span class="ow">=</span> <span class="n">renderHtmlNodes</span> <span class="o">$</span> <span class="n">showForm</span> <span class="s">&quot;/&quot;</span> <span class="n">form</span>
</span><span class='line'>      <span class="n">heistLocal</span> <span class="p">(</span><span class="n">bindSplice</span> <span class="s">&quot;form&quot;</span> <span class="p">(</span><span class="n">return</span> <span class="n">nodes</span><span class="p">))</span> <span class="o">$</span> <span class="n">render</span> <span class="s">&quot;form&quot;</span>
</span><span class='line'>    <span class="kt">Right</span> <span class="p">(</span><span class="kt">LoginData</span> <span class="n">e</span> <span class="n">p</span> <span class="n">r</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">writeBS</span> <span class="s">&quot;Success!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we define our initialiser, which sets up Heist and our routes.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">app</span> <span class="ow">::</span> <span class="kt">SnapletInit</span> <span class="kt">App</span> <span class="kt">App</span>
</span><span class='line'><span class="nf">app</span> <span class="ow">=</span> <span class="n">makeSnaplet</span> <span class="s">&quot;hdf&quot;</span>
</span><span class='line'>  <span class="s">&quot;An example of digestive-functors and Heist playing nicely together.&quot;</span>
</span><span class='line'>  <span class="kt">Nothing</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">h</span> <span class="ow">&lt;-</span> <span class="n">nestSnaplet</span> <span class="s">&quot;heist&quot;</span> <span class="n">heist</span> <span class="o">$</span> <span class="n">heistInit</span> <span class="s">&quot;resources/templates&quot;</span>
</span><span class='line'>    <span class="n">addRoutes</span> <span class="p">[</span> <span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">formHandler</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'>    <span class="n">return</span> <span class="o">$</span> <span class="kt">App</span> <span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
